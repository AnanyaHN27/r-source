			   THE R TASK LIST
			Nominally Solved Problems

----------------------------------------------------------------------
TASK:	No "round" or "signif" for complex arguments.
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	[ These are both implemented now ]

----------------------------------------------------------------------
TASK:	"atan" and "atan2" not available for complex arguments.
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at maechler@stat.math.ethz.ch
	[ Implemented (including optional 2nd argument to atan) ]

----------------------------------------------------------------------
TASK:	Check complex "atan" values.
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	E.g.  atan(tan(1i)), tan(atan(1i)).
	S-PLUS : Copyright (c) 1988, 1996 MathSoft, Inc.
	S : Copyright AT&T.
	Version 3.4 Release 1 for Sun SPARC, SunOS 4.1.3_U1 : 1996 
	Working data will be in .Data 
	> atan(tan(1i))
	[1] 0-1i
	[ Surely this is an error!!!! ]

----------------------------------------------------------------------
TASK:	Hyperbolic and inverse hyperbolic functions not implemented
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	[ We need to check results for complex functions.    ]
	[ We may need to check for hyperbolics in configure. ]

----------------------------------------------------------------------
TASK:	complex "sum" and "mean" not implemented
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	[ Implemented these and complex "prod".		       ]
	[ Minor bugs in do_summary also fixed.		       ]
	[ Added check in partial sorting for complex argument. ]

----------------------------------------------------------------------
TASK:	logarithm functions
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch Kurt.Hornik@ci.tuwien.ac.at
	Requests for a version of log which is compatible with the S
	"log(x, base=e)".  It has been noted that "log2" and "log10"
	do not work for complex numbers.
	[ Reimplemented so that everything feeds through "log".	      ]
	[ "log10" and "log2" are now interpreted.		      ]
	[ logarithms with a base are currently slower than they	      ]
	[ could be because the logarithm of the base is not memoized. ]

----------------------------------------------------------------------
TASK:	"round" results
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at maechler@stat.math.ethz.ch
	R> round(.5 + -3:7)
	 [1] -3 -2 -1  1  2  3	4  5  6	 7  8
	S> round(.5 + -3:7)
	 [1] -2 -2  0  0  2  2	4  4  6	 6  8
	[ Change round to use rint(3).	This provides the desired ]
	[ behavior.  Is this is feature or bug?			  ]

----------------------------------------------------------------------
TASK:	check availability of rint(3)
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	[ Check that rint(3) is available with configure. ]
	[ There should be an #ifdef-ed alternative.	  ]
	[ Nah!	Let's just assume its available ...	  ]
	[ On second thoughts, it must be conditional for  ]
	[ Windows and the Mac.	There is now a portable	  ]
	[ version of this which is #ifdef'd.		  ]

----------------------------------------------------------------------
TASK:	assignment of NULL into a list in "lm"
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	lm(y ~ 1) now works again (was broken in 0.16, thanks!), but:
		R> colnames(y) <- c("V1", "V2")
		R> lm(y ~ 1)
		Error: dimnames: number of dimensions must equal number of names
	The problem is with
		dimnames(z$effects)[[1]] <- NULL
	in lm.fit().
	Replacing it by
		rownames(z$effects) <- NULL
	solves the problem, because "rownames<-" works around the
	problem that l[[i]] <- NULL removes i from the list l.
	[ Note: An (RI) approved idiom for doing this is: ]
	[ dimnames(z)[1] <- list(NULL)			  ]

----------------------------------------------------------------------
TASK:	polyroot/cpoly confusion in CHANGES
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	The `CHANGES' file mentions the new function `cpoly', which
	is not provided however.  I think it should be `polyroot'.
	[ Updated ]

----------------------------------------------------------------------
TASK:	polyroot problem
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	"polyroot(1)" currently gives a segfault.
	It should return complex(0).
	[ Arguments of length 0 or one special-cased. ]

----------------------------------------------------------------------
TASK:	formatC configuration
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	formatC() fails with
		Error in .C("str_signif",  : C/Fortran function not ..."
	And indeed, it is not ...
	As an aside:  strsignif.o is missing from src/applc/Makefile.in
	now (it was the other way round in 0.16.1, I think).
	[ Configuration updated. ]

----------------------------------------------------------------------
TASK:	"read.table" problem with "as.is"
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	The as.is argument to read.table() does not work as described in the
	help text, values are NOT recycled if necessary.
	A solution is to replace
		if (is.logical(as.is)) {
			if (length(as.is) == 1) 
				as.is <- rep(as.is, cols)
		}
	in read.table() by
		if (is.logical(as.is)) {
			as.is <- rep(as.is, length = cols)
		}
	[ Change made as suggested. ]

----------------------------------------------------------------------
TASK:	"paste" segfault
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	paste(list(character(0),""), 1:2) gives a segfault
	[ S turns as.character(list(character(0),"")) into ]
	[ c("character(0)", "\"\"")  i.e. it deparses each ]
	[ element of the list).	 We have changed what R so ]
	[ that it does that too.   What has this broken??? ]

----------------------------------------------------------------------
TASK:	binary operations do not handle dimnames correctly
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	R is not careful enough about dimnames:
		R> x <- structure(1:3, names=LETTERS[1:3])
		R> x
		A B C 
		1 2 3
		R> x + 1
		A B C 
		2 3 4
		R> 1 + x
		[1] 2 3 4
	(and similarly for other ops).
	[ Changes made for arithmetic operators (arithmetic.c) ]
	[ logical operators (logic.c) and relational operators ]
	[ (relop.c).  Also added facilities for arrays and     ]
	[ time series.					       ]

----------------------------------------------------------------------
TASK:	Errors in "parse" and "source"
STATUS:	Closed
FROM:	plummer@iarc.fr
	#1) The expression in a "for" loop gets turned into a list
	when you read the expression in with source(). eg if the
	file Rexample1 contains the following code
		do <- function()
		{
			n <- 1
			for(i in 1:10) {
				n <- n*i
			}
		}
	Then this happens when you use source() to read it in
		R> source("Rexample1")
		R> do
		function () 
		{
			n <- 1
			for (i in 1:10) list({
				n <- n * i
			})
		}
	[ "expression" type is now implemented as a list with ]
	[ "class" equal to expression.			      ]

----------------------------------------------------------------------
TASK:	Errors in "parse" and "source"
STATUS:	Closed
FROM:	plummer@iarc.fr
	Here is a small collection of parse problems which range
	from the slightly irritating to the bizarre. Some of them
	may not be bugs but they're all annoying.  Sorry this is
	so long but I need to illustrate most of them.
	#2) If you forget the closing brackets around an "if"
	statement when editing a function, the editor (vi) returns
	to the R command prompt but any further statements you type
	are added to the function until you supply the closing
	bracket: eg if the function do2 looks like this when you
	edit it
		function (x)
		{
			if(x > 0 ) {
				foo <- 10/x
		}
	then this is what happens
		R> do2_vi(do2)
		/tmp/00193aaa: 5 lines, 46 characters.
		R> ls()
		+ help()
		+ }
		R> do2
		function (x) 
		{
			if (x > 0) {
				foo <- 10/x
			}
			ls()
			help()
		}
	[ EOF was being discarded in the code which deals with ]
	[ context sensitive processing for "if" statements.    ]

----------------------------------------------------------------------
TASK:	Errors in "parse" and "source"
STATUS:	Closed
FROM:	plummer@iarc.fr
	#3) If you put too many closing brackets in a function then
	it is truncated: eg if it looks like this when you edit it
		function (x)
		{
			if (x > 0) {
				foo <- 10/x
			}}
			bar <- foo
		}
	then you get
	R> do2_vi(do2)
	/tmp/00193aaa: 7 lines, 62 characters.
	R> do2
	function (x) 
	{
		if (x > 0) {
			foo <- 10/x
		}
	}
	[ This was caused by the fact that the "edit" function was ]
	[ only reading a single form from the file created by the  ]
	[ editor.  The fix is to read an arbitrary number of forms ]
	[ and to just evaluate and return the first of these. This ]
	[ forces a syntax check of the entire file.		   ]

----------------------------------------------------------------------
TASK:	Errors in "parse" and "source"
STATUS:	Closed
FROM:	plummer@iarc.fr
	#5) When the editor returns the error message "An error
	occured on line ..." then the line number is way out -
	usually by a factor of 10.
	[ Fixed.  Line number was not being initialized. ]

----------------------------------------------------------------------
TASK:	warning messages when doing vector recycling
STATUS:	Closed
FROM:	jlindsey@luc.ac.be (and others)
	When vectors are combined and the length of the longer one
	is not a multiple of the length of the shorter one, a
	warning message should be issued.
	[ Where should this happen in general?	We have added it to  ]
	[ arithmetic and subset assignment.  Is there anywhere else? ]

----------------------------------------------------------------------
TASK:	"any" and "all" problem with numeric data
STATUS:	Closed
FROM:	la-jassine@aix.pacwan.net
	I think the following should return error messages:
	any(0.1)
	[1] TRUE
	all(0.1)
	[1] TRUE
	[ This behavior agrees with S ]
	
----------------------------------------------------------------------
TASK:	"attach" order is wrong
STATUS:	Closed
FROM:	p.dalgaard@kubism.ku.dk
	R has:
	> attach(data)
	> attach(data[-1])
	> search()
	[1] ".GlobalEnv" "data"	      "data[-1]"   ".SystemEnv"
	This is opposite of Splus:
	> attach(data)
	> attach(data[-1])
	> search()
	 [1] "/home/sfe/pd/.Data"
	 [2] "data[-1]"
	 [3] "data"
	[ It was not order, but rather index misinterpretation. ]

----------------------------------------------------------------------
TASK:	is.vector - what about attributes
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	YAI (and a bug: mode='any'  should INCLUDE   mode='language') :
		is.vector(call(ls()))			#[1] FALSE
		is.vector(call(ls()), mode='language')	#[1] TRUE
		is.vector(call(ls()), mode='call')	#[1] FALSE
	And now even more about	 S <-> R :
	Looking at  is.vector, I realized that you've duplicated/emulated
	S's bug of
		is.vector( ...named vector... )	  #--> FALSE
	This is a bug even mentioned as bug in the ?is.vector
	help page of  S-plus.  ((and I found out:  the bug is
	fixed in S version 4)).
	[ If x has any attribute other than "names" it returns ]
	[ false, otherwise it returns true.		       ]

----------------------------------------------------------------------
TASK:	New "methods" function
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	This is a more useful / extensive 'methods' function,
	modeled after the S one:
	[ Code folded into the base library. ]

----------------------------------------------------------------------
TASK:	"par" values
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	Since I'm wishing already:
	Currently, par() returns a 49-element which is really outdated.
	My current  $RHOME/src/library/funs/par	 starts as follows:
	.Pars <- c(
	"1em", "adj", "ask", "bty", "cex", "cin", "col", "cra", "crt", "csi",
	"cxy", "din", "err", "exp", "fig", "fin", "font", "frm", "fty", "lab",
	"las", "lty", "lwd", "mai", "mar", "mex", "mfg", "mgp", "new", "oma",
	"omd", "omi", "pch", "pin", "plt", "pty", "rsz", "smo", "srt", "tck",
	"uin", "usr", "xaxp", "xaxs", "xaxt", "xpd", "yaxp", "yaxs", "yaxt")
	##>> R-alpha  0.16.1
	##>>  pp_ par(); names(pp[sapply(pp,is.null)])
	##>>  [1] "1em" "cxy" "din" "exp" "frm" "fty" "rsz" "uin"
	##>>	   ---	 ---   ---   ---   ---	 ---   ---   ---  
	##-- These are the ones used in 0.16.1 -- $RHOME/src/main/par.c	 Query(..) :
	.Pars <- c(
	"adj", "ann", "ask", "bg", "bty",
	"cex", "cex.axis", "cex.lab", "cex.main", "cex.sub", "cin",
	"col", "col.axis", "col.lab", "col.main", "col.sub", "cra", "crt", "csi",
	"err", "fg", "fig", "fin",
	"font", "font.axis", "font.lab", "font.main", "font.sub", "lab", "las",
	"lty", "lwd", "mai", "mar", "mex", "mfcol", "mfg", "mfrow", "mgp", "mkh",
	"new", "oma", "omd", "omi", "pch", "pin", "plt", "ps", "pty",
	"smo", "srt", "tck", "tmag", "type", "usr",
	"xaxp", "xaxs", "xaxt", "xlog", "xpd",
	"yaxp", "yaxs", "yaxt", "ylog")
	After starting R (which starts X11),
	this now gives (using my  'str' function):
	> str(par())
	[ pars omitted ]

----------------------------------------------------------------------
TASK:	"is.na" for data frames (generic function needed)
STATUS:	Closed
FROM:	p.dalgaard@kubism.ku.dk plummer@iarc.fr
	> 3) is.na() treats data frames as lists. It always returns
	> a vector of FALSE values with the same length as the
	> names attribute.
	My initial reaction to this was: "but they *are* lists".
	One tends to think of them as "data matrices", but much of
	the useful syntax really is list-like, and in fact
		> is.list(dfr)
		[1] TRUE
	but
		> is.matrix(dfr)
		[1] FALSE
	However, that NA is not an element of the list of vectors
	in a data frame is hardly informative, so it is reasonable
	to expect different behaviour.
	Splus has 
		is.na(dfr)
		  x y 
		1 F F
		2 F F
		3 F F
		> class(dfr)<-""
		> is.na(dfr)
		[1] F F
		attr(, "row.names"):
		[1] "1" "2" "3"
		attr(, "class"):
		[1] ""
	So the logic seems to be to special-case data frames by having is.na
	look for the "data.frame" class and if so, recurse into the component
	vectors. 
	[ is.na is now a generic function.  Method dispatch occurs  ]
	[ internally.  There is also a method for class data.frame. ]

----------------------------------------------------------------------
TASK:	"scan" problem
STATUS:	Closed
FROM:	plummer@iarc.fr
	1) Trying to restrict the number of items read by scan()
	using the "nmax" or "nlines" parameters doesn't work when
	"what" is a list.  The problem, which lies in the C function
	scanFrame, can be fixed by this patch to scan.c
	333c333,335
	<			if(maxlines > 0 && (linesread == maxlines || nc*line
	sread >= maxitems))
	---
	>			if(maxitems > 0 && nc*linesread >= maxitems)
	>				goto done;
	>			if(maxlines > 0 && linesread == maxlines)
	[ Change made. ]

----------------------------------------------------------------------
TASK:	"apply" problem
STATUS:	Closed
FROM:	plummer@iarc.fr
	2) In the interpreted code for apply(), "dlen" should be
	renamed to "dl".  This bug stops you from using apply on
	a data frame.
	[ This seems to work now. ]

----------------------------------------------------------------------
TASK:	is.numeric incompatibility
STATUS:	Closed
FROM:	thomas@biostat.washington.edu
	is.numeric() returns TRUE for logical variables (in S it
	returns FALSE).	 This means that S code which needs to
	distinguish these will work if it uses is.logical() and
	fail if it uses is.numeric().  It also means that for a
	logical vector x the formula y~x is equivalent to y~factor(x)
	in S and y~as.numeric(x) in R. These are different unless
	you use treatment contrasts.
	[ is.numeric changed to refect this.  Again, the ]
	[ question arises.  What has this broken?	 ]

----------------------------------------------------------------------
TASK:	PostScript Glitch
STATUS:	Closed
FROM:	p.dalgaard@biostat.ku.dk
	Do a plot in landscape mode, view with ghostscript, select
	"reopen".  Whooplah, plot turns 90 degrees. Only way to
	get it back to horizontal seems to be to modify the Media
	setting or the magnification.
	Someone else mentioned problems with landscape plots
	recently. Could be same thing. I suspect the problem has
	something to do with this:
	%!PS-Adobe-1.0
	[...]
	%%EndComments
	595.28 0 translate 90 rotate
	/Helvetica findfont 10 scalefont setfont
	0.5 setlinewidth
	gsave
	% float float --
	[...]
	Apparently, this stuff executes only once. If you put it
	at the beginning of each page, the problem goes away. (I
	don't quite understand this: At least a complete reopen of
	the file should reexecute the Prologue. shouldn't it? Also
	puzzling me is the fact that there's an unequal supply of
	gsave's (3) and grestore's (2) in the file)
	[ Rewrote the code.  It's much cleaner now. ]

----------------------------------------------------------------------
TASK:	Another PostScript Glitch
STATUS:	Closed
FROM:	p.dalgaard@biostat.ku.dk
	I suspect that there should be a %% comment setting
	the papersize. TeX output from dvips has
	%%DocumentPaperSizes: a4
	but that's with %!PS-Adobe-2.0. Anybody have the relevant
	details on PS structure? (And is there really any reason
	to stick to PS v. 1.0?)
	[ We have switched to Adobe 3.0 structuring. ]

----------------------------------------------------------------------
TASK:	help.start()
STATUS:	Closed
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	I am not sure how useful others find that, but we like the
	idea of using a browser which is already open rather than
	starting a new one.  This can be accomplished by replacing
	help.start() by
		help.start <-
		function(gui = "irrelevant", browser="netscape")
		{
			file <- "$RHOME/html/index.html"
			system(paste(browser, " -remote \"openURL(",
				file, ")\" 2>/dev/null || ",
			       browser, " ", file, " &", sep = ""))
		}
	Of course, if we decide that the on-line help system will
	eventually be based on HTML, I can extend the above to
	other browsers as well ...
	[ Wow.	This is pretty cool.  We will have to connect this ]
	[ with "help" and "?" to do the searching ...		   ]

----------------------------------------------------------------------
TASK:	"axis" limits problem
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	## R 0.16.1,  Solaris 2.5.x:
		plot(1, 1.79e308)
	gives an infinite loop 

----------------------------------------------------------------------
TASK:	"cbind" segfault
STATUS:	Closed
FROM:	venkat@biosta.mskcc.org
	I am using R 0.16.1
	If I use "cbind(as.vector(1:2),as.array(3:4),as.vector(1:2))"
	I get
	      [,1] [,2]
	 [1,]	 1    3
	 [2,]	 2    4
	And if I use "cbind(as.array(1:2),as.vector(3:4),as.array(1:2))"
	It crashes the application

----------------------------------------------------------------------
TASK:	array subsetting segfault
STATUS:	Closed
FROM:	ammann@utdallas.edu
	Here's an interesting bug in R.15 and R.16.1:
	x <- array(1:12,c(2,2,3))
	dimnames(x) <- list(c("A","B"),c("C","D"),1:3)
	x
	x[,2,]
	Segmentation fault (core dumped)

----------------------------------------------------------------------
TASK:	argument corruption
STATUS:	Closed
FROM:	schwarte@feat.mathematik.uni-essen.de
	Defining
		qsum<-function(data=data){
		  for(i in 2:length(data))
		    data[i]<-data[i]+data[i-1]
		  data
		}
	And then
		data<-1:10
		tmp<-qsum(data=data)
		print(data)
		print(tmp)
	Demonstrates that data is corrupted.

----------------------------------------------------------------------
TASK:	"sweep" and "crossprod"
STATUS:	Closed
FROM:	jlindsey@luc.ac.be
	Two minor things that it would be useful to have in standard R,
	from S, are sweep and crossprod. Most of the other common
	functions are now in. Jim

----------------------------------------------------------------------
TASK:	"exits" bug
STATUS:	Closed
FROM:	plummer@iarc.fr
	The following program will cause a core dump. It should generate
	an error message.
		do <- function() {
			x <- character(0)
			exists(x)
		}

----------------------------------------------------------------------
TASK:	"nchar" incompatibility
STATUS:	Closed
FROM:	plummer@iarc.fr
	The S-PLUS version of nchar will return a matrix when given a
	matrix, whereas the R version returns a vector.

----------------------------------------------------------------------
TASK:	passing graphical parameters
STATUS:	Closed???
FROM:	plummer@iarc.fr
	It would be nice to be able to pass graphical parameters to
	plotting functions. For example I'm having trouble with calls
	to "legend" in CODA which use the "cex" parameter.

----------------------------------------------------------------------
TASK:	par and hex color specifications
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	> par(col=rgb(0,0,0.5020))
	Error: attempt to set invalid value for graphics parameter "col".
	plot(1:10,col=rgb(0,0,0.5))	# ok
	plot(1:10,col=rgb(0,0,0.502))	# not ok
	plot(1:10,col=rgb(0,0,0.506))	# ok
	[ rgb(0,0,0.502) => "#000080".	The bit pattern		  ]
	[ corresponding to this was integer NA.			  ]
	[ Fixed by setting the low-order byte of the word to 255. ]

----------------------------------------------------------------------
TASK:	different behavior of Splus and R "factor"
STATUS:	Closed
FROM:	Friedrich.Leisch@ci.tuwien.ac.at
	R> factor(double(0))
	Error in factor(match(x, levels), length(levels), ordered) : invalid number of factor levels
	S> factor(double(0))
	character(0)
	[ Wow.	This is bizzare!  It returns "character" ??? ]
	[ We now do this too, BUT "character" ???!!!	      ]

----------------------------------------------------------------------
TASK:	"barplot" problem
STATUS:	Closed
FROM:	Friedrich.Leisch@ci.tuwien.ac.at
	barplot contains several times combinations like
	   plot.new(...)
	   plot.window(xlim, ylim, log = "", ...)
	which IMHO should be 
	   plot.new()
	   plot.window(xlim, ylim, log = "", ...)
	[ These changes made and also the window setup has been ]
	[ redone using yaxs="i" and using standard axis.	]

----------------------------------------------------------------------
TASK:	random number seeds
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	I'am writing a help page about .Random.seed.
	I've been looking a bit at the source,
	i.e,	src/math/sunif.c
		~~~~~~~~~~~~~~~~~
	and	src/main/random.c
		~~~~~~~~~~~~~~~~~
	Then I tried
		.Random.seed <- rep(0,3); runif(10)
		## [1] 0 0 0 0 0 0 0 0 0 0
		rnorm(5)
		## [1] -2.216036 -2.216036 -2.216036 -2.216036 -2.216036
	and you see that the seed is never changed.
	My proposal (is working, I've tested) :
		Replace lines 51..53 of	 main/random.c (in function GetSeeds(..)) with
			ix_seed = INTEGER(seeds)[0]; if(!ix_seed) ix_seed++;
			iy_seed = INTEGER(seeds)[1]; if(!iy_seed) iy_seed++;
			iz_seed = INTEGER(seeds)[2]; if(!iz_seed) iz_seed++;

	which also deals with the very rare case
		(not impossible from my documentation of  rand() !!)
	that Randomize(.)  sets one of the i[x|y|z] to 0 accidentally.
	Here is a patch you can apply directly.
--- random.c~	Tue Nov 26 19:13:57 1996
+++ random.c	Wed Mar 19 12:30:44 1997
@@ -48,9 +48,9 @@
		if (!isVector(seeds) || LENGTH(seeds) < 3)
			error("missing or invalid random number seeds\n");
		seeds = coerceVector(seeds, INTSXP);
-		ix_seed = INTEGER(seeds)[0];
-		iy_seed = INTEGER(seeds)[1];
-		iz_seed = INTEGER(seeds)[2];
+		ix_seed = INTEGER(seeds)[0]; if(!ix_seed) ix_seed++;
+		iy_seed = INTEGER(seeds)[1]; if(!iy_seed) iy_seed++;
+		iz_seed = INTEGER(seeds)[2]; if(!iz_seed) iz_seed++;
	}
 }
	[ patch applyied for 0.50 ]

----------------------------------------------------------------------
TASK:	"axis" problem
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch p.dalgaard@biostat.ku.dk
	[MM] I am still working on the Examples part of the help files,...
	Looking at axis(.),
	I tried
		 plot(1:7, rnorm(7), xaxt='n')
		 axis(1, 1:7, LETTERS[1:7])
	and was quite disappointed;
	also
		axis(3)
	just does nothing (visible) in the above example;
	whereas
		axis(4)
	does what it should.
	I found out that  axis(..) does NOT seem to work together with
	"[xy]axt = 'n'".

	[PD] Yes, plot "forgets to forget" the axis type settings.
	Things work OK if you tack on ,xaxt='l' to the axis calls, but
	surely this can get fixed before the actual release?

	I can't spot the bug offhand, but it would seem to be somewhere
	in src/main/plot.c. Everything seems to be surrounded by
	SavePars();/RestorePars(); pairs, but I'm suspecting a
	save-change-save-restore-restore problem: with saves going to
	static data, you could end up 'restoring' a changed parameters
	twice.
	[ Duh! if xaxt="n" then we returned from axis without ]
	[ resetting any of the stored graphics parameters.    ]
	[ This looks like a more general problem.  Shouldn't  ]
	[ we also restore the parameters before error returns ]
	[ too?						      ]


----------------------------------------------------------------------
TASK:	"dotplot"
STATUS:	Closed
FROM:	thomas@biostat.washington.edu
	The labels argument of dotplot() doesn't have any effect when
	the data are in a matrix.
	[ The default of using the row names is now overriden. ]

----------------------------------------------------------------------
TASK:	"dotplot" labels
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	It seems that the current (0.16.1 as well as 0.50 beta 5)
	version of dotplot() ignores the labels and groups arguments in
	the matrix case.  I haven't looked into this very carefully,
	but it seems that one can take care of the `labels' part by
	replacing
		labels <- rownames(x)
	by
		if(is.null(labels))
			labels <- rownames(x)
	and the groups part by e.g. replacing
		groups <- col(x, as.factor=TRUE)
	by
		if(is.null(groups))
			groups <- col(x, as.factor=TRUE)
		else 
			groups <- factor(col(x), labels = groups)
	but the latter is not really fool-proof.

	Also, the documentation does not explain the groups argument.
	[ See above. ]

----------------------------------------------------------------------
TASK:	naming in "c", "cbind" and "rbind"
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	This is an old problem / bug which I think  had been solved once
	(partially at least), and still works partially in 0.16.1,
	but it seems it broke (even more) in 0.50-x :
	##---- 1)  c(..) names	-----
	c(a=pi, b=1)
	# should give	     -- and it does give it in 0.16.1 (!)
	#	 a	  b 
	# 3.141593 1.000000 
	## but in  0.50-5, the first name is "lost" somewhere
	c(a=pi, b=1)
	#		  b 
	# 3.141593 1.000000 
	#-- the same in this example :
	c(a=1,b=2, d=4:7)
	#     b d1 d2 d3 d4 
	#  1  2	 4  5  6  7 
	##---- 2)  cbind(..) /	rbind(..)   dimnames  -----
	##-- Here, no  dimnames are produced -- BUT they should! (same for 0.15,0.16):
	cbind(a=1,b=1:3)
	rbind(x=2:4,y=1:3)
	[ We now follow S semantics exactly.			      ]
	[ Well almost.	There appears to be a new arg "deparse.level" ]
	[ to cbind/rbind which provides a different behavior.  It is  ]
	[ really just syntactic sugar though ...		      ]

----------------------------------------------------------------------
TASK:	bug in distance computations
STATUS:	Closed
FROM:	rwehrens@igc.phys.chem.ethz.ch
	In dist.c, function maximum (line 66), the statement	  
		if(dist > dev)
	should be replaced by
		if(dev > dist)
	[ MM has also pointed out that there are two distance ]
	[ functions which need to be merged. ]

----------------------------------------------------------------------
TASK:	dotplot
STATUS:	Closed
FROM:	When dotplot is called immediately after device driver startup
	it dies.  It looks like there should be a call to plot.new()
	sooner (as well as where it is a present).
	[ Removed the check at the start of strwidth.		 ]

----------------------------------------------------------------------
TASK:	Arguments being mutated
STATUS:	Closed
FROM:	<Andreas.Weingessel@ci.tuwien.ac.at>
	Suppose I have defined the following function
		R> sin.myclass
		function (x) 
		{
			class(x) <- NULL
			plot(sin(x), t = "l")
		}
	If I do
		R> x<-1:10
		R> class(x)<-"myclass"
		R> sin(x)
	I get the expected results (the sinus of x is plotted), but the class
	of x has changed:
	[ The bug from hell bites back. ]

----------------------------------------------------------------------
TASK:	Saving in batch mode
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	Go to a directory where you don't have write permission and type
		echo 'x _ 1' | R
	For me (R 0.50-3, but also 0.16.1, on Solaris),
	this gives an infinite loop producing lines of the form
	  > 
	  Error: can't save data -- unable to open ./.Rdata
	  > 
	  Error: can't save data -- unable to open ./.Rdata
	  > 
	  Error: can't save data -- unable to open ./.Rdata
	[ When R is invoked in non-interactive mode, errors are	    ]
	[ now considered fatal and no error recovery is attempted.  ]
  
----------------------------------------------------------------------
TASK:	Segfault in dimnames mutation
STATUS:	Closed
FROM:	<Kurt.Hornik@ci.tuwien.ac.at>
	Btw, here's another way to produce a segfault with admittedly
	nonsense code:
		R> x <- 1:5
		R> dimnames(x)[1,2] <- NULL
		Segmentation fault
	[ Hmmm.	 This seems to have gone away.	I get the error	    ]
	[ message "Error: incorrect number of subscripts on array". ]

----------------------------------------------------------------------
TASK:	"system" return value
STATUS:	Closed
FROM:	<Kurt.Hornik@ci.tuwien.ac.at>
	If it does not sound too unreasonable, do you think you could
	have system() return the return value of the command if intern
	is FALSE rather than NULL?  (The change shouldn't take more
	than a minute, and would really be helpful ...) Thanks,
	[ Changes made. ]

----------------------------------------------------------------------
TASK:	Postscript (etc fonts)
STATUS:	Closed
FROM:	(venkat@biosta.mskcc.org
	Is there any way of changing fonts (not just the shape which
	font={1,2,3,4} seem to do)?  The PSmetrics seem to be available
	for a lot of fonts but none seem to be accessible except the
	default.
	[ There is a new "family" argument to postscript which	   ]
	[ can be any of "AvantGarde", "Bookman", "Courier",	   ]
	[ "Helvetica", "Helvetica-Narrow", "NewCenturySchoolbook", ]
	[ "Palatino" or "Times".  In addition, setting font=5 will ]
	[ cause the "Symbol" family to be used.	 This is still	   ]
	[ experimental and it is hard to see it being used without ]
	[ some sort of math capability.	 (That's coming too.)	   ]


----------------------------------------------------------------------
TASK:	"autoload", "require", "provide"
STATUS:	Closed
FROM:	<Kurt.Hornik@ci.tuwien.ac.at>
	I know it's Easter and not Christmas, but here is something
	that may be nice in future releases of R:
	* A way of autoloading symbols from library packages, similar
	to the way Emacs does this.  E.g., if I think that I need
	Surv() before I can do anything else with the survival library,
	I could put something like
		autoload("Surv", "survival", TRUE)
	in my .Rprofile, and survival would be loaded only after I
	first call Surv().
	* It would also be nice if Thomas' require() and a perhaps something
	like provide() would be available.
	[ Thomas' "require" and "provide" added. "autoload" is on the ]
	[ medium term list.					      ]

----------------------------------------------------------------------
TASK:	Boxplot fails with NAs
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	Boxplotting objects containing NA's fails with the error message
	  Error in plot.window(xlim = c(0.5, n + 0.5), ylim = limits, log = log):
	  NAs not allowed in ylim
	The reason seems to be that the extremes of the whiskers computed by
	boxplot.stats(x) are NA if x contains NA's, because
	  out <- x < (stats[2] - coef * iqr) | x > (stats[4] + coef * iqr)
	still contains NA's and hence the subsequent
	  if (coef > 0) 
	    stats[c(1, 5)] <- range(x[!out])
	will set the extremes to NA.
	An obvious idea would be to start by removing NA's in x ... I am not
	sure if this breaks anything.  If this is o.k., the new code for
	boxplot.stats could e.g. be
		boxplot.stats <- function(x, coef)
		{
		  x <- x[!is.na(x)]
		  n <- length(x)
		  stats <- fivenum(x)
		  iqr <- diff(stats[c(2, 4)])
		  out <- x < (stats[2]-coef*iqr) | x > (stats[4]+coef*iqr)
		  if(coef > 0) stats[c(1, 5)] <- range(x[!out])
		  conf <- stats[3]+c(-1.58, 1.58)*diff(stats[c(2, 4)])/sqrt(n)
		  list(stats=stats, n=n, conf=conf, out=x[out])
		}
	[ Changes similar in  sprirt made. ]

----------------------------------------------------------------------
TASK:	Argument tags botched in c()
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	Please try to get this fixed in the release:
	0.16:
	R> c(a = 1, b = 2)
	a b 
	1 2 
	R> c(a = 1, "b" = 2)
	a b 
	1 2 
	0.50 beta 5:
	R> c(a = 1, b = 2)
	  b 
	1 2 
	R> c(a = 1, "b" = 2)
	Segmentation fault
	[ Fixed now ]

----------------------------------------------------------------------
TASK:	rhyper bugs
STATUS:	Closed
FROM:	<VENKAT@biosta.mskcc.org>
	I get strange results when I use rhyper. See below
	> rhyper(1,20,30,10)
	[1] 15
	> rhyper(1,20,30,10)
	[1] 11			    How can you get a value larger than 10
	> rhyper(1,20,30,10)	    when you sample only 10
	[1] 9
	> rhyper(2,20,30,10)
	[1] 11 13
	> rhyper(1,50,60,40)
	The final call was running for over 10 minutes when I killed it.
	[ Egads!  Clearly this had never been used before.    ]
	[ There were a series of typos in the interface code. ]

----------------------------------------------------------------------
TASK:	"crossprod" is broken
STATUS:	Closed
FROM:	A.Kovac@Bristol.ac.uk
	> A<-matrix(rep(0, 23*51), ncol=23)
	> B<-matrix(rep(0, 23*51), ncol=23)
	> crossprod(A,B)
	Error in NULL : negative length vectors are not allowed
	The replacement t(A)%*%B works of course. 
	[ The matrix z in the C code was being accessed using the ]
	[ wrong number of rows which was trashing the attributes  ]
	[ (and god knows what else).				  ]

----------------------------------------------------------------------
TASK:	NULL args to "any" and "all" fail.
STATUS:	Closed.
FROM:	Kurt.Hornik@ci.tuwien.ac.at
	We need "all(NULL) -> TRUE" and "any(NULL) -> FALSE".
	[ Oversight. ]

----------------------------------------------------------------------
TASK:	rbind() does something strange to dimnames
STATUS:	Closed.
FROM:	thomas@biostat.washington.edu
	If rbind is used to combine matrices without row names
	there is a seg violation.
	[ Oversight. Aways assumed that row names existed. ]

----------------------------------------------------------------------
TASK:	Some functions not "complex aware"
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	1) Several functions still (0.50 - pre6)
	give seg.faults when called with complex:
		unique( 1i)  --> segfault
	In 'factor', levels are defaulted to  'sort(unique(x))'
	which seg.faults  factor( 1i).
	Because of 'factor', table(..complex..)	 seg.faults,.....
	2)  sort ( complex )   [[Of course this is minor ..]]
	You may not believe this can be useful, but...
	I've been digging in old S-code	 which makes use of this
	(and also of unique(.))
	Let z = x + 1i*y;  x,y real vectors, then,  
	order(z) : <-->	 order(x,y)
	[ Ok, but sorting complex numbers seems like a heresy. ]

----------------------------------------------------------------------
TASK:	"crossprod" problems.
STATUS:	Closed
FROM:	A.Kovac@Bristol.ac.uk
	The function was incorrectly saying "non-conformable args"
	when they were.	 Also there was a clear problems with
	dimname attibutes.
	[ The first of these was a logic problem in the shared code ]
	[ with matrix products, the second a typo CAR != CADR.	    ]
	[ Threw in complex cross products for good measure.	    ]

----------------------------------------------------------------------
TASK:	Differentation broken
STATUS: Closed
FROM:	<thomas@biostat.washington.edu>
	> D(expression(z * (log(z) /z)),"z")
	Error: invalid form in unary minus check

TASK:	ls.print (actually 'doc2ms' !)
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	Yes, I do confirm that the  Help page  (?NCOL) contains	 '.COL'.
	Apply the following patch (to doc2ms) in  $RHOME/etc , and "all is well":

--- doc2ms	Tue May 13 10:10:33 1997
+++ Old/doc2ms	Sun Nov 24 23:41:49 1996
@@ -122,8 +122,6 @@
 $2
 .DE
 ')
-define(DEQTEX,`')
-define(DEQHTML,`')
 END
 # Fix up the input to protect things that m4 is sensitive about.
 sed '
@@ -149,8 +147,8 @@
 s/M4_RQ/'\''/g
 s/M4_COMMA/,/g
 s/M4_IFELSE/ifelse/g
-s/^\.Internal/\\\&.Internal/
-s/^\.C/\\\&.C/
-s/^\.Fortran/\\\&.Fortran/
+s/^.Internal/\\\&.Internal/
+s/^.C/\\\&.C/
+s/^.Fortran/\\\&.Fortran/
 s/\\n/\\\\n/g
 '
	[applied]

----------------------------------------------------------------------
----------------------------------------------------------------------
TASK:	List printing
STATUS: Closed
FROM:	R@stat.auckland.ac.nz
	If an attribute is list valued, its components should print
	as follows.
		attr(,fred)$x
	rather than as
		attr(,fred)
		$x
	[ This problem plus some other formatting problems for	  ]
	[ recursive structures have been fixed.	 R printing looks ]
	[ very much like S now.				   ]

----------------------------------------------------------------------
TASK:	eigenvalues and eigenvectors for general systems
STATUS:	Closed
FROM:	R@stat.auckland.ac.nz
	[ Really just a matter of grabbing the correct eispack code. ]

----------------------------------------------------------------------
TASK:	"update" for lm and glm models
STATUS:	Closed
FROM:	jlindsey@luc.ac.be
	First something from 0.12 that I forgot to report:
	update() for a formula works with lm() but not glm()
	for which it (still in 0.13) gives
	"Error in update.formula(call$formula,formula) ..."
	[ See also Thomas Lumley's problems; added better checking. RG]

----------------------------------------------------------------------
TASK:	problem with "glm" with binomial errors
STATUS:	Closed
FROM:	p.dalgaard@kubism.ku.dk
	in glm(,binomial) it's possible that loss of significant
	digits make expected values 0 or 1 even though there's no
	divergence of the fit.	(Happened to me with menarche data,
	infants and grown-ups included)
	[ Fixes received Thomas Lumley. ]

----------------------------------------------------------------------
TASK:	Errors in "parse" and "source"
STATUS:	Closed
FROM:	plummer@iarc.fr
	#4) If you put a few lines of comments at the start of a
	function, then the comments always appear *after* the first
	line of code.
	[ This needs a bit of a look.  Comments are a pain.	 ]
	[ Later: Some progress made on this.  We need to look at ]
	[ preserving comments befor functions.			 ]

----------------------------------------------------------------------
TASK:	deprecated
STATUS:	Closed
FROM:	maechler@stat.math.ethz.ch
	As I mentioned in a recent mail,
	I just saw that	 0.16.1 does not contain  'deprecated' anymore,
	even though the function still exists.
	[ I don't think we need deprecated anymore. ]

----------------------------------------------------------------------
TASK:	Verbose debugging mode
STATUS:	Closed
FROM:	plummer@iarc.fr
	It would be really nice to have a verbose mode for the debug
	function, which steps through each line automatically while
	printing each line to the screen. Currently I have to step
	through each line with the return key just to see where CODA
	crashes.  This can get very tedious as its a huge program.
	[ traceback() gets you this information. ]

----------------------------------------------------------------------
TASK:	Name Attributes on Calls
STATUS: Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	A call with tagged arguments is something like a list, the tags
	can be used to access elements, but the names attribute is absent,
	until the call is coerced to a list. (Attempting to set the names()
	causes evaluation. Changing "list" to "blipblop" causes an 'Error:
	couldn't find function "blipblop"' at that point.)

	> j<-substitute(list(a=1, b=2))
	> j
	list(a = 1, b = 2)
	> j$b
	[1] 2
	> names(j)
	NULL
	> names(j)<-NULL
	> j
	[[1]]
	[1] 1

	[[2]]
	[1] 2
	[At least under SunOS this is fixed. RG]
----------------------------------------------------------------------
TASK:	Coercion to Call is Broken
STATUS:	Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	This one is plainly a bug. Meaningless, but...
	> j<-as.call(list(a=1,b=2))
	> j
	Segmentation fault (core dumped)
	[The problem was with printing a LANG sxp with a tag that wasn't
	 a comment (actually a list of comments). RG]

----------------------------------------------------------------------
TASK:	"as.call" problem 
STATUS:	Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	Strange... as.call should return its argument if is.call is true?
	> j<-substitute(list(a=1,b=2))
	> j
	list(a = 1, b = 2)
	> as.call(j)
	Error in as.call(j) : invalid argument list
	> is.call(j)
	[1] TRUE
	[It does now. RG]

----------------------------------------------------------------------
TASK:	Cut is incompatible
STATUS:	Closed
FROM:	<bates@stat.wisc.edu>
	As I recall the S-plus and S "cut" functions return length(breaks)
	when an element of x is equal to the maximum value of breaks.  The R
	version of "cut" calls the C function "bincode" which returns an NA
	for this situation then cut croaks trying to make a factor with the
	result.
	I can provide a detailed example if this would help.
	[ I added bincode2 which does intervals of the form (a,b] like S
	wants and an option right=TRUE to set these. RG]

----------------------------------------------------------------------
TASK:	Incompatibilities
STATUS: Closed	
FROM:	<bates@stat.wisc.edu>
	While bringing up the extended Splines library of classes and methods
	that Bill and I created, I discovered the problem with "cut".  I will
	try to go back and resolve that from the sources in a clean way.

	There are two other minor gliches that I encountered.  S-plus has the
	moral equivalent of
	 coefficients.default <- function(x, ...) x$coefficients
	and 
	 as.data.frame <-
	   function(x, row.names = NULL, optional = F, ...)
	   UseMethod("as.data.frame")
	These would both be helpful to us.  Would you consider adding them or
	would you prefer that we do the customization ourselves?
	I think we will end up having to create separate source files for R
	and S-plus and Sv4 for some of our libraries.  I expect that the
	majority of the code can go into a "common" file then we might need to
	either create a sort of "ifdef" statement or put the "ifdef" stuff
	into other files.
	[ Added RG]

----------------------------------------------------------------------
TASK:	"rhyper"
STATUS:	Closed
FROM:	E. S. Venkatraman (venkat@biosta.mskcc.org)
	I reported bugs in "rhyper" and the TASKS.OLD file claims that
	they have been fixed. But R continues to get stuck (the prompt
	never comes back) if I use rhyper with N1, N2, n large, for
	example "rhyper(5,200,250,60)".
	[ Robert found a typo in the underlying generator.  Fixed. ]

----------------------------------------------------------------------
TASK:	Changes to pt().
STATUS:	Closed
FROM:	<jlindsey@luc.ac.be>
	rhyper is probably using the same internal functions as for the
	Student t (pt) which has the same problem. I think the pbeta function is not
	calculating efficiently for large values.
	By the way, would it be possible to eliminate the line (floor) that
	rounds the degrees of freedom in pt.c? That way, pt can be used in
	likelihood functions for fitting the Student t distributions.

	What I did was to rewrite pt.c in R without the floor line and use it
	for building the Student t likelihood function in my nonlinear
	regression function, gnlr. What I find is that, as nlm searches, it gets
	slower and slower if the "degrees of freedom" parameter increases over
	about 8-10.
	  It seems to me that my son had another example with a comparison
	with S-Plus. I shall ask him.
	  Cheers, Jim


----------------------------------------------------------------------
TASK:	Seg Violation in "tapply"
STATUS:	Closed
FROM:	<Andreas.Weingessel@ci.tuwien.ac.at>
	Calling tapply with a NULL as INDEX argument causes a segmentation
	fault on an i-586-linux machine.
	So, if for example
		 y<-list(a=1:10,b=2:5)
	then
		tapply(y$a,y$c,mean)
	causes a segmentation fault. 
	This seg. fault is produced when a dimension of length integer(0) is
	assigned to a list with one element and this object is shown
	afterwards. E.g.:
	R>  y<-list(a=1:10)
	R> dim(y) <- integer(length(NULL))
	R> y
	Segmentation fault
	This happens in the code of tapply, when INDEX=NULL in the lines
	  extent <- integer(length(INDEX))
	and
	  dim(ans) <- extent

----------------------------------------------------------------------
TASK:	t Distribution
STATUS:	Closed
FROM:	<thomas@biostat.washington.edu>
	Yes please.  Non-integer degrees of freedom are very useful for
	approximations as well. For example: Welch's unequal variance t-test,
	Sattherthwaite approximations in ANOVA, and others.
	If we can't get non-integer df we at least NEED a warning and preferably a
	mention in the help file. It seems that qt() and rt() handle non-integer
	df correctly (a relief, since I've been using them quite a bit) and that
	the chisq and f distributions are ok too.
	One simple solution is
		pt<-function(q,df) 1-0.5*(1-pf(q^2,1,df))
	using the fact that a t(n) is the square root of an F(1,n).

----------------------------------------------------------------------
TASK:	Vector Recycling Weirdness
STATUS:	Closed
FROM:	<thomas@biostat.washington.edu>
wompom:~> R
	R : Copyright 1997, Robert Gentleman and Ross Ihaka
	Version 0.49 Beta (April 23, 1997)
	R> f
	function () 
	{
		FALSE & matrix(FALSE, ncol = 1)
	}
	R> g
	function () 
	FALSE & matrix(FALSE, ncol = 1) 
	R> f()
	Warning in FALSE & matrix(FALSE, ncol = 1) : longer object length
		is not a multiple of shorter object length
	      [,1]
	[1,] FALSE
	R> g()
	      [,1]
	[1,] FALSE
	Is this weird or what?
	[ I can't remember what fixed this ... ]

----------------------------------------------------------------------
TASK:	"length" incompatibility
STATUS:	Closed
FROM:	<bates@auckland.ac.nz>
	In converting some S code that messes around with expressions and
	formulae and such I have found that
	 > mode((~ foo)[[2]])
	 [1] "symbol"
	 > length((~ foo)[[2]])
	 [1] NA
	I get a whole lot of code breaking on me because I check for the
	length of the object before looking at the mode.  I realize that
	symbols look different in R than in S (not to mention having a
	different name for the mode) but I'm not sure why the length of a
	symbol must be missing.	 Is this an oversight?
	[ Symbols have length one now. ]

----------------------------------------------------------------------
TASK:	Yet another stupid way to cause a segfault:
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	R> x
	Error: Object "x" not found
	R> debug(t.test)
	R> t.test(rnorm(10))
	debug: choices <- c("two.sided", "greater", "less")
	Browse[1]> return()
	NULL
	R> x
	Error: Object "x" not found
	Browse[1]> return()
	Segmentation fault
	[ It is now possible to return from browser() ]

----------------------------------------------------------------------
TASK:	Hypergeometric probabilities
STATUS:	Closed.
FROM:	<maechler@stat.math.ethz.ch>
	I think that AS 152 (which has been improved, but is still
	available as file  ...statlib.../apstat/152 )
	should be used in place of  phyper.c
	[ I will look again, but I think my version is better! ]
	[ Well, at least when the typos are fixed :-)	       ] 

----------------------------------------------------------------------
TASK:	dhyper
STATUS:	Closed
FROM:	<VENKAT@biosta.mskcc.org>
	I get the following incorrect answer
	   > dhyper(34,410,312,49)
	   [1] 2.244973e-118
	when the correct value is
	   > dhyper(34,410,312,49)	    (from S-Plus)
	   [1] 0.0218911
	[ Caused by a typo in "math4" (arithmetic.c)	]
	[ The 3rd argument was used instead of the 4th. ]

----------------------------------------------------------------------
TASK:	"qt"
STATUS:	Closed.
FROM:	<p.dalgaard@kubism.ku.dk>
	> Kurt Hornik writes:
	>  > I found the following 2 problems (no debugging, sorry).
	>  > 
	>  > * qt(0.975, 3) never returns.
	>  > 
	>  > Can someone please check that?  Happens for me on Debian GNU/Linux/ix86
	>  > compiled with CFLAGS="-O2 -g".
	> 
	> I am having a look at the computations of p-values and quantiles which
	> depend on the incomplete beta function at  present. ....
	The original problem seems to be one of loss of accuracy with
	instruction reordering. Doubling the value of "acu" cures it (I ran it
	under the debugger and the test value was stuck at about 1.5e-32,
	being compared to acu=1e-32). This is probably a generic problem with
	these last-bit-accurate routines.

	[The new 'qt' does not have this compiler optimization problem.
	 The 'qbeta' problem mentioned has been +/- fixed, too.		MM]
----------------------------------------------------------------------
TASK:	"eigen"
STATUS:	Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	eigen() seems to work for symmetric matrices only. This is out
	of sync with the help file.

	Paul Gilbert <la-jassine@aix.pacwan.net>:
	As Peter Dalgaard mentioned, eigen does not yet support
	non-symmetric matrices.	 This is confirmed by looking at
	eigen.c, which also seems to suggest a different source
	for the code than is indicated in the help.
	The help also indicates an optional argument "symmetric"
	which is not in the code.  As I recall, the Splus version
	calls two different  C code algorithms for symmetric and
	non-symmetric matrices. The argument is useful to insure
	continuity when that is an issue.
	If you don't  have C or fortran code handy, I have fortran
	from the LAPACK library which I used before Splus supported
	non-symmetric matrices. I would have to get someone to send
	it from work, but I think that is possible.  Please let me
	know if you want be to try to do this.

----------------------------------------------------------------------
TASK:	Curses for Linux
STATUS:	Closed
FROM:	<agebhard@zidsrv.sci.uni-klu.ac.at>
	When I tried to compile R on a S.u.S.E-4.4 linux box, I ended up with
	unresolved symbols from libtermcap. So I decided to use the newer libncurses.

	Applying the following patch to configure.in and creating a new
	configure script with "autoconf	 configure.in > configure" solved my problems.

	--- configure.in.orig	Tue May	 6 15:05:20 1997
	+++ configure.in	Tue May	 6 15:05:23 1997
	@@ -142,13 +142,17 @@
 
	 #  LIBRARIES
	 #
	-#  This is set up so we only get one of one of -ltermcap and -ltermlib
	+#  This is set up so we only get one of one of -lncurses -ltermcap and -ltermlib
 
	 AC_CHECK_LIB(m, sin)
	+AC_CHECK_LIB(ncurses, main)
	+if test -z "HAVE_LIBNCURSES"
	+then
	 AC_CHECK_LIB(termcap, main)
	 if test -z "HAVE_LIBTERMCAP"
	 then
	 AC_CHECK_LIB(termlib, main)
	+fi
	 fi
	 AC_CHECK_LIB(readline, main)
	 AC_CHECK_LIB(dl, dlopen)
	[ Changes made. Needs testing by Linuxers. ]

----------------------------------------------------------------------
TASK:	plot line textures
STATUS:	Closed
FROM:	<jlindsey@luc.ac.be>
	When lines are plotted using a lot of points (say 250),
	all types look solid except the dotted (3) on the screen.
	Postscript output for the same plot instruction is correct.
	[ I think we're stuck with this.  Its what X delivers. ]

----------------------------------------------------------------------
TASK:	solve bug
STATUS:	Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	> solve(cbind(c(1,1,1,1),contr.helmert(4)))
		    [,1]	[,2]	      [,3]	   [,4]
	[1,]  0.25000000  0.25000000  2.500000e-01 2.500000e-01
	[2,] -0.50000000  0.50000000  1.850493e-17 1.850493e-17
	[3,] -0.16666667 -0.16666667  3.333333e-01 1.117072e-17
	[4,] -0.08333333 -0.08333333 -8.333333e-02 2.500000e-01
	> solve(cbind(c(1,1,1,1),contr.helmert(4)))
	Error: incorrect tag type
	solve(cbind(c(1,1,1,1),contr.helmert(4)))
			 ^
	Error: syntax error
	[ Already fixed by Robert I think. ]

----------------------------------------------------------------------
TASK:	plot axis & log
STATUS:	Closed
FROM:	<kovac@figaro.stats.bris.ac.uk>
	The following commands crash:
	> plot(1:4,axes=F,log="x")
	> axis(1,c(1,2,3,4))
	zsh: segmentation fault	 R
	Lines 35-37 of axis():
	35:	   else {
	36:		   ind <- (usr[1] <= at & at <= usr[2])
	37:	   }
	should be replaced by
		else {
			if (log)
				ind <- (10^usr[1] <= at & at <= 10^usr[2])
			else ind <- (usr[1] <= at & at <= usr[2])
		}
	Moreover, there should be a check if length(at) equals zero
	before calling the internal axis command.
	But wait, there's more:
	> plot(1:4,log="x")
	> plot(1:4)
	The second call of plot produces an empty plot. The following
	sequence works:
	> plot(1:4,log="x")
	> par(xlog=F)
	> plot(1:4)	   
	Why does R have the graphical parameters "xlog" and "ylog"?
	They do not seem to work for me and are not used by S-Plus.

----------------------------------------------------------------------
TASK:	axis problems
STATUS:	Closed
FROM:	<kovac@figaro.stats.bris.ac.uk>
	The commands
	> plot(1:4,axes=F)
	> axis(1,c(4,3,2,1))
	produce the tick-marks but not the labels (except the last
	one). Sorting the vector at in axis() seems to work, ie
	should lines 35-40 should read:
		else {
			at <- sort(at)
			if (log)
				ind <- (10^usr[1] <= at & at <= 10^usr[2])
			else ind <- (usr[1] <= at & at <= usr[2])
		}

----------------------------------------------------------------------
TASK:	axis problems
STATUS:	Closed
FROM:	<kovac@figaro.stats.bris.ac.uk>
	Here are another three problems with logarithmic scales:
	1) segments() does not work with logarithmic scales. I suggest to change
	lines 962-973 in "plot.c":

	    for (i = 0; i < n; i++) {
		if (FINITE(xt(x0[i%nx0])) && FINITE(yt(y0[i%ny0]))
		    && FINITE(xt(x1[i%nx1])) && FINITE(yt(y1[i%ny1]))) {
		    GP->col = INTEGER(col)[i % ncol];
		    if(GP->col == NA_INTEGER) GP->col = colsave;
		    GP->lty = INTEGER(lty)[i % nlty];
		    GStartPath();
		    GMoveTo(XMAP(xt(x0[i % nx0])), YMAP(yt(y0[i % ny0])));
		    GLineTo(XMAP(xt(x1[i % nx1])), YMAP(yt(y1[i % ny1])));
		    GEndPath();
		}
	    }

	2) rect() does not work either. Unfortunately, do_rect() in "plot.c" 
	overrides the yt() function... What about this (lines 983-1031):

	SEXP do_rect(SEXP call, SEXP op, SEXP args, SEXP env)
	{
	    SEXP sxl, sxr, syb, sys, col, lty, border;
	    double *xl, *xr, *yb, *ys;
	    int i, n, nxl, nxr, nyb, nys;
	    int ncol, nlty, nborder;
	    int colsave, ltysave;

	    GCheckState();

	    if(length(args) < 4) errorcall(call, "too few arguments\n");
	    xypoints(call, args, &n);

	    sxl = CAR(args); nxl = length(sxl); args = CDR(args);
	    syb = CAR(args); nyb = length(syb); args = CDR(args);
	    sxr = CAR(args); nxr = length(sxr); args = CDR(args);
	    sys = CAR(args); nys = length(sys); args = CDR(args);

	    PROTECT(col = FixupCol(GetPar("col", args)));
	    ncol = LENGTH(col);

	    PROTECT(border =  FixupCol(GetPar("border", args)));
	    nborder = LENGTH(border);

	    PROTECT(lty = FixupLty(GetPar("lty", args)));
	    nlty = length(lty);

	    xl = REAL(sxl);
	    xr = REAL(sxr);
	    yb = REAL(syb);
	    ys = REAL(sys);

	    ltysave = GP->lty;
	    colsave = GP->col;
	    GMode(1);
	    for (i = 0; i < n; i++) {
		if (FINITE(xt(xl[i%nxl])) && FINITE(yt(yb[i%nyb]))
		    && FINITE(xt(xr[i%nxr])) && FINITE(yt(ys[i%nys])))
			GRect(XMAP(xt(xl[i % nxl])), YMAP(yt(yb[i % nyb])),
			      XMAP(xt(xr[i % nxr])), YMAP(yt(ys[i % nys])),
			    INTEGER(col)[i % ncol],
			    INTEGER(border)[i % nborder]);
	    }
	    GMode(0);
	    GP->col = colsave;
	    GP->lty = ltysave;
	    UNPROTECT(3);
	    return R_NilValue;
	}

	3) The legend() function needs changes as well. I attach my
	quick hack below, but I think there are better solutions... :-)

	legend <-
	function (x, y, legend, fill, col = "black", lty, pch, bty = "o", 
		bg = par("bg"), xjust = 0, yjust = 1, ...) 
	{
		xlog <- par("xlog")
		ylog <- par("ylog")
		if (xlog) 
			x <- log10(x)
		if (ylog) 
			y <- log10(y)
		xchar <- xinch(par("cin")[1])
		ychar <- yinch(par("cin")[2]) * 1.2
		xbox <- xinch(par("cin")[2] * 0.8)
		ybox <- yinch(par("cin")[2] * 0.8)
		yline <- 2 * xchar
		w <- 2 * xchar + max(strwidth(legend))
		h <- (length(legend) + 1) * ychar
		if (missing(y)) {
			if (is.list(x)) {
				y <- x$y
				x <- x$x
			}
		}
		if (!is.numeric(x) || !is.numeric(y)) 
			stop("non-numeric coordinates")
		if (length(x) <= 0 || length(x) != length(y)) 
			stop("differing coordinate lengths")
		if (length(x) != 1) {
			x <- mean(x)
			y <- mean(y)
			xjust <- 0.5
			yjust <- 0.5
		}
		if (!missing(fill)) {
			w <- w + xchar + xbox
		}
		if (!missing(pch)) {
			if (is.character(pch) && nchar(pch) > 1) {
				np <- nchar(pch)
				pch <- substr(rep(pch[1], np), 1:np, 
					1:np)
			}
			w <- w + 1.5 * xchar
		}
		if (!missing(lty)) 
			w <- w + 3 * xchar
		x <- x - xjust * w
		y <- y + (1 - yjust) * h
		xt <- rep(x, length(legend)) + xchar
		yt <- y - (1:length(legend)) * ychar
		if (bty != "n") {
			if (xlog) {
				x1 <- 10^x
				x2 <- 10^(x + w)
			}
			else {
				x1 <- x
				x2 <- x + w
			}
			if (ylog) {
				y1 <- 10^y
				y2 <- 10^(y - h)
			}
			else {
				y1 <- y
				y2 <- y - h
			}
			rect(x1, y1, x2, y2, col = bg)
		}
		x <- x + xchar
		if (!missing(fill)) {
			if (xlog) {
				x1 <- 10^xt
				x2 <- 10^(xt + xbox)
			}
			else {
				x1 <- xt
				x2 <- xt + xbox
			}
			if (ylog) {
				y1 <- 10^(yt - 0.5 * ybox)
				y2 <- 10^(yt + 0.5 * ybox)
			}
			else {
				y1 <- yt - 0.5 * ybox
				y2 <- yt + 0.5 * ybox
			}
			rect(xt, yt - 0.5 * ybox, xt + xbox, yt + 0.5 * 
				ybox, col = fill)
			xt <- xt + xbox + xchar
		}
		if (!missing(pch)) {
			if (xlog) 
				x1 <- 10^(xt + 0.25 * xchar)
			else x1 <- xt + 0.25 * xchar
			if (ylog) 
				y1 <- 10^yt
			else y1 <- yt
			points(x1, y1, pch, col = col)
			xt <- xt + 1.5 * xchar
		}
		if (!missing(lty)) {
			if (xlog) {
				x1 <- 10^xt
				x2 <- 10^(xt + 2 * xchar)
			}
			else {
				x1 <- xt
				x2 <- xt + 2 * xchar
			}
			if (ylog) 
				y1 <- 10^yt
			else y1 <- yt
			segments(x1, y1, x2, y1, lty = lty, col = col)
			xt <- xt + 3 * xchar
		}
		if (xlog) 
			x1 <- 10^xt
		else x1 <- xt
		if (ylog) 
			y1 <- 10^yt
		else y1 <- yt
		text(x1, y1, text = legend, adj = c(0, 0.35))
	}

	[Bugs fixed; "Why 'xlog' & 'ylog' is not really answered/documented"]

----------------------------------------------------------------------
TASK:	legend (but see below)
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>

	Arne, thank you for your very useful  bug findings and fixing.
	Your first two "patches" to  plot.c  are really ok.

	In your
	>> 3) The legend() function needs changes as well. I attach my
	>> quick hack below, but I think there are better solutions... :-)
	>> 
	>> legend <-
	>> function (x, y, legend, fill, col = "black", lty, pch, bty = "o", 
	>>	   bg = par("bg"), xjust = 0, yjust = 1, ...) 
	>> .....
	there was one typo in the  ``if(!missing(fill))''  clause, you assigned
	x1,..y2, but then did not use them.

	Below I fixed this and found a way to make the whole  if(xlog) / (ylog)
	things a little more concise.
	This is a patch against "plain 0.49" ,	$RHOME/src/library/base/funs/ :

--- legend.~1~	Fri Jan 17 03:44:24 1997
+++ legend	Mon May 12 09:42:25 1997
@@ -2,13 +2,18 @@
 function(x, y, legend, fill, col="black", lty, pch, bty="o", bg=par("bg"),
	xjust=0, yjust=1, ...)
 {
+	xlog <- par("xlog")
+	ylog <- par("ylog")
+	if (xlog) x <- log10(x)
+	if (ylog) y <- log10(y)
	xchar <- xinch(par("cin")[1])
	ychar <- yinch(par("cin")[2]) * 1.2
	xbox <- xinch(par("cin")[2] * 0.8)
	ybox <- yinch(par("cin")[2] * 0.8)
	yline <- 2*xchar
	w <- 2 * xchar + max(strwidth(legend))
-	h <- (length(legend)+1)*ychar
+	n.leg <- length(legend)
+	h <- (n.leg + 1) * ychar
	if(missing(y)) {
		if(is.list(x)) {
			y <- x$y
@@ -39,23 +44,43 @@
		w <- w + 3 * xchar
	x <- x - xjust * w
	y <- y + (1 - yjust) * h
-	xt <- rep(x, length(legend)) + xchar
-	yt <- y - (1:length(legend)) * ychar
-	if(bty != "n")
-		rect(x, y, x+w, y-h, col=bg)
+	xt <- rep(x, n.leg) + xchar
+	yt <- y - (1:n.leg) * ychar
+	if (bty != "n") {
+		xx <- c(x,x+w)
+		if (xlog) xx <- 10^xx
+		yy <- c(y,y-h)
+		if (ylog) yy <- 10^yy
+		rect(xx[1], yy[1], xx[2], yy[2], col = bg)
+	}
	x <- x + xchar
	if(!missing(fill)) {
-		rect(xt, yt - 0.5 * ybox,
-			xt + xbox, yt + 0.5 * ybox, col=fill)
+		xx <- c(xt,xt+xbox)
+		if (xlog) xx <- 10^xx
+		yy <- yt + c(-.5,.5) * ybox
+		if (ylog) yy <- 10^yy
+		rect(xx[1], yy[1], xx[2], yy[2], col = fill)
		xt <- xt + xbox + xchar
	}
	if(!missing(pch)) {
-		points(xt + 0.25 * xchar, yt, pch, col=col)
+		x1 <- xt + 0.25 * xchar
+		if (xlog) x1 <- 10^x1
+		y1 <- yt
+		if (ylog) y1 <- 10^y1
+		points(x1, y1, pch, col = col)
		xt <- xt + 1.5 * xchar
	}
	if(!missing(lty)) {
-		segments(xt, yt, xt + 2 * xchar, yt, lty=lty, col=col)
+		xx <- c(xt, xt + 2 * xchar)
+		if (xlog) xx <- 10^xx
+		y1 <- yt
+		if (ylog) y1 <- 10^y1
+		segments(xx[1], y1, xx[2], y1, lty = lty, col = col)
		xt <- xt + 3 * xchar
	}
-	text(xt, yt, text=legend, adj=c(0, 0.35))
+	x1 <- xt
+	y1 <- yt
+	if (xlog) x1 <- 10^x1
+	if (ylog) y1 <- 10^y1
+	text(x1, y1, text = legend, adj = c(0, 0.35))
 }
----------------------------------------------------------------------
TASK:	legend cont
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	This time, I have at least tested it out under quite a few
	circumstances; the last patch (a few hours ago) would FAIL
	in many cases!

--- legend.~1~	Fri Jan 17 03:44:24 1997
+++ legend	Mon May 12 12:07:23 1997
@@ -2,18 +2,23 @@
 function(x, y, legend, fill, col="black", lty, pch, bty="o", bg=par("bg"),
	xjust=0, yjust=1, ...)
 {
+  xlog <- par("xlog")
+  ylog <- par("ylog")
+  if (xlog) x <- log10(x)
+  if (ylog) y <- log10(y)
	xchar <- xinch(par("cin")[1])
	ychar <- yinch(par("cin")[2]) * 1.2
	xbox <- xinch(par("cin")[2] * 0.8)
	ybox <- yinch(par("cin")[2] * 0.8)
	yline <- 2*xchar
	w <- 2 * xchar + max(strwidth(legend))
-	h <- (length(legend)+1)*ychar
+  n.leg <- length(legend)
+  h <- (n.leg + 1) * ychar
	if(missing(y)) {
		if(is.list(x)) {
			y <- x$y
			x <- x$x
-		}
+    } else stop("missing y")
	}
	if(!is.numeric(x) || !is.numeric(y))
		stop("non-numeric coordinates")
@@ -39,23 +44,36 @@
		w <- w + 3 * xchar
	x <- x - xjust * w
	y <- y + (1 - yjust) * h
-	xt <- rep(x, length(legend)) + xchar
-	yt <- y - (1:length(legend)) * ychar
+  xt <- rep(x, n.leg) + xchar
+  yt <- y - (1:n.leg) * ychar
	if(bty != "n")
		rect(x, y, x+w, y-h, col=bg)
	x <- x + xchar
	if(!missing(fill)) {
-		rect(xt, yt - 0.5 * ybox,
-			xt + xbox, yt + 0.5 * ybox, col=fill)
+    xx <- cbind(xt, xt + xbox)
+    if (xlog) xx <- 10^xx
+    yy <- yt + cbind(rep(-0.5,n.leg), 0.5) * ybox
+    if (ylog) yy <- 10^yy
+    rect(xx[,1], yy[,1], xx[,2], yy[,2], col = fill)
		xt <- xt + xbox + xchar
	}
	if(!missing(pch)) {
-		points(xt + 0.25 * xchar, yt, pch, col=col)
+    x1 <- xt + 0.25 * xchar
+    if (xlog) x1 <- 10^x1
+    y1 <- yt
+    if (ylog) y1 <- 10^y1
+    points(x1, y1, pch, col = col)
		xt <- xt + 1.5 * xchar
	}
	if(!missing(lty)) {
-		segments(xt, yt, xt + 2 * xchar, yt, lty=lty, col=col)
+    xx <- cbind(xt, xt + 2 * xchar)
+    if (xlog) xx <- 10^xx
+    y1 <- yt
+    if (ylog) y1 <- 10^y1
+    segments(xx[,1], y1, xx[,2], y1, lty = lty, col = col)
		xt <- xt + 3 * xchar
	}
+  if (xlog) xt <- 10^xt
+  if (ylog) yt <- 10^yt
	text(xt, yt, text=legend, adj=c(0, 0.35))
 }
	[Patch applied, and more.	MM]

----------------------------------------------------------------------
TASK:	memory error?



STATUS:	Closed?
FROM:	<thomas@biostat.washington.edu>
	I have a probably related problem. Sporadically, an attempt to do
		a[,1,1,drop=F]
	or similar subsetting on a 3-d matrix causes a segfault at
	line 83 of attrib.c.  In a previous version this happened
	reliably when dimensions were lost from multi-d arrays and
	was due to incorrect handling of the dimnames attributes
	which crashed attrib.c at that point when the dimnames were
	accessed.
	Is the same sort of thing happening again?
	[ I have been unable to reproduce this. ]

----------------------------------------------------------------------
TASK:	Machine independence
STATUS:	Closed?
FROM:	<luke@stat.umn.edu>
	An alternative that may be worth considering is to make
	.Rdata machine independent, perhaps by using the xdr routines
	-- I think these are available on Mac and Windows as well
	as any unix system that does nfs.

	If a move toward machine-independent representation seems
	reasonable, it may be worth looking at some of the binary
	data exchange formats used by nasa and others,

		CDF http://nssdc.gsfc.nasa.gov/cdf/cdf_home.html
		netCDF http://www.unidata.ucar.edu/packages/netcdf/index.html
		HDF http://hdf.ncsa.uiuc.edu/

	There may also be something useful in the "Scientific Data Format
	Information FAQ"
	(http://www.cv.nrao.edu/fits/traffic/scidataformats/faq.html).
	[  I have make save and load use the xdr library when it is  ]
	[  available.  It would be nice to have the xdr code on all  ]
	[  platforms.  Not too hard ...	 ]

----------------------------------------------------------------------
TASK:	lm.influence and weights
STATUS: Closed	
FROM:	<thomas@biostat.washington.edu>
	lm.influence() doesn't work correctly on weighted models
	(and thus on glm objects).
	[Added weights; lm.influence in R returns the differences in 
	coefs rather than the adjusted coefs which seems more sensible
	but incompatible ]
----------------------------------------------------------------------
TASK:	Incorrect warning message
STATUS:	Closed
FROM:	<thomas@biostat.washington.edu>
	R : Copyright 1997, Robert Gentleman and Ross Ihaka
	Version 0.49 Beta (April 23, 1997)
		R> f
		function () 
		{
			FALSE & matrix(FALSE, ncol = 1)
		}
		R> g
		function () 
		FALSE & matrix(FALSE, ncol = 1) 
		R> f()
		Warning in FALSE & matrix(FALSE, ncol = 1) : longer object length
		is not a multiple of shorter object length
		      [,1]
		[1,] FALSE
		R> g()
		      [,1]
		[1,] FALSE
	Is this weird or what?
	[ Was this a missed initiaization.  I suspect this is fixed ]
	[ I can't reproduce it now. ]

----------------------------------------------------------------------
TASK:	Seg violation in "return"
STATUS: Closed	
FROM:	<hornik@ci.tuwien.ac.at>
	R> x
	Error: Object "x" not found
	R> debug(t.test)
	R> t.test(rnorm(10))
	debug: choices <- c("two.sided", "greater", "less")
	Browse[1]> return()
	NULL
	R> x
	Error: Object "x" not found
	Browse[1]> return()
	Segmentation fault
	[ there was a seemingly aborted attempt to include contexts for
	  the browser to return from. Once this was fixed up the problem
	  was solved ]

----------------------------------------------------------------------
TASK:	Updating in lm / glm
STATUS:	Closed?
FROM:	<thomas@biostat.washington.edu>
	Three bugs and 2.5 fixes.

	1. To make update() work with a new formula for glms, change the first
	line of the glm() function from
	call <- sys.call(
	to
	call<-match.call()
	(this means that the formula component of the returned call is labelled so
	that update can find it)

	2. update.lm doesn't do anything with its weights= argument. Add
		if (!missing(weights))
			call$weights<-substitute(weights)
	Similarly, to get update to work properly on glms you need a lot more of
	these if statements (see update.glm at the end of the message).

	3. update.lm evaluates its arguments in the wrong frame. It creates a
	modified version of the original call and evaluates it in 
	sys.frame(sys.parent()).  If update.lm is called directly this is correct,
	but if it is called via update() the correct frame is
	sys.frame(sys.parent(2)). Worse still, if it is called by NextMethod()
	from another update.foo() the correct frame is still higher up the list.

	My solution (a bit ugly) is to move up the list of enclosing calls
	checking at each stage to see if the call is NextMethod, update or an
	update method.	It can be seen at the end of update.glm at the bottom of
	this message, and something of this sort needs to be added to other update
	methods.
	[ I've added a new type of context- CTXT_GENERIC, all generic functions
	 have their context set to this just before the method is applied and
	 revert to CTXT_RETURN after the method has been applied. This seems
	 to provide the required result. The other fixes were added in. RG]

----------------------------------------------------------------------
TASK:	Complex Nits
STATUS:	Closed
FROM:	<la-jassine@aix.pacwan.net>
	Mod, Re, Im, and Conj should work for Real numbers using as.complex
	complex should be
	   complex <- function (n = 0, real = numeric(), imaginary = numeric())
	not 
	   complex <- function (n = 0, real = numeric(), imag = numeric()) 

----------------------------------------------------------------------
TASK:	"eigen" shortfall
STATUS:	Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	eigen() seems to work for symmetric matrices only. This is
	out of sync with the help file.
	[ Source code adjusted to fit the documentation. ]

----------------------------------------------------------------------
TASK:	abline + coefficients
STATUS:	Closed
FROM:	<nobu@psrc.isac.co.jp>
	I found a little different behavior of R with S.
	at R-0.49:
	    > a
	    [1] 12 23 22 34 44 54 55 70 78
	    > plot(a)
	    > abline(lsfit(seq(1,len=length(a)), a))
	    Error: no applicable method for "coefficients"
	at S (from AT&T '92) result draw coefficient line without error.
	Then I think to need define a function as followed:
	    coefficients.default <- function(x) x$coef
	[ Default method already added for Doug Bates. ]

----------------------------------------------------------------------
TASK:	beta and lbeta error
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	The beta(.)  and  ln(beta(..))	functions are not giving
	proper results in R-0.49.  This does NOT affect usual
	beta-distribution calculations, since the internal  beta(.)
	and lbeta(.) are okay.
	beta(1,2)
	[1] -0.6931472
	exp(beta(1,2))
	[1] 0.5
	lbeta(3,4)
	[1] 3
	[ Caused by a cut/paste typo in names.c ]

----------------------------------------------------------------------
TASK:	"pbeta"/"qbeta"
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	(When using the new  pbeta(.); this actually DOES seem to matter).
	For qbeta(.), 
	I now have an  R- function with quite a bit of diagnostic output,
	so I can easily see what's going,  AND the function has	 
		lower, upper = 1-lower
	as extra arguments.
	I found in a few tests, that "all" problems seem to be gone, when I
	brutally set  lower = 0 (and therefore	upper = 1).
	Unfortunately, this is not directly reproducible with the C-version.
	In any case, this seems to make it unnecessary to use 
	the  good special formulae for	 qt(x, df)  for high 'df'.
	Let you know more when I see through!

	[Put into 0.50-a1. No infinite loops anymore
	 (still off values for some extreme arguments).	MM]

----------------------------------------------------------------------
TASK:	dhyper.c
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	Line 30 should be changed from
	if (NR <= 0 || NR <= 0 || n <= 0 || n > N)
	to			^-- typo: "R" should be "B"
	if (NR < 0 || NB < 0 || n < 0 || n > N)
	(NR==0 or NB == 0  should not be a DOMAIN_ERROR)

----------------------------------------------------------------------
TASK:	String length problems
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	This is not a  cat(.) but a  string storing/parsing problem:
	nchar("\n\n")	 # gives  2  instead of 3
	[ Hmmm.	 Was this typed to readline I wonder?  There it	 ]
	[ seems that ^L must be escaped with ^V.  Using the ANSI ]
	[ \f will now produce a literal formfeed.  Indeed, using ]
	[ any of the ANSI C escapes will work.			 ]

----------------------------------------------------------------------
TASK:	Batch Mode Errors
STATUS:	Closed?
FROM:	<thomas@biostat.washington.edu> + MM
	Errors which occur during batch mode execution produce
	a cascade of error messages.  We now print the first error
	message and abort.  I don't think it makes much sense to
	continue execution after an error.  I suppose we could
	parse the remainder of the input and not execute.  Glim77
	used to do this.

----------------------------------------------------------------------
TASK:	lsfit problem (really cbind memory error)
STATUS:	Closed
FROM:	<ncv@ap.cc.affrc.go.jp>
	I would like to report my problem in running R with a large data set.
	Something has been change in the lsfit() function, especially the
	parameters "wt" and "yname".
	Your help is highly appreciated.
	[ This was an old bug the reason I mention it is because    ]
	[ in looking at the example code he sent in I noticed that  ]
	[ it was taking 30Mb to read a 176 x 166 data frame.  A	    ]
	[ little calulation shows that 0.5Mb should have been	    ]
	[ enough!  It seems that Robert and I were working at cross ]
	[ puposes in scan and read.table.  We ended up allocating   ]
	[ n x n x p rather than n x p ... ].

----------------------------------------------------------------------
TASK:	Documentation Nit
STATUS:	Closed
FROM:	<Kurt.Hornik@ci.tuwien.ac.at>
	The documentation for ls/objects has
		ls(name, pos=2, envir=sys.frame(sys.parent()),
		   all.names=FALSE, pattern)
	but the code has
		ls <-
		function (name, pos = -1, envir = NULL,
			  all.files = FALSE, pattern)
	[ Documentation ok;  ls	 ==  object still. ]

----------------------------------------------------------------------
TASK:	Martin's Least Favourite ... Part 1.
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	1) print(2^30, digits = 12) #-	exponential form; unnecessarily!
	 formatC(2^30, digits = 12) #- shows you what you'd want above
	 ## S-plus is okay here; note that the problem also affects
	 ##	paste(.)  & format(.) :
	 options(digits=10)
	 paste(2^(4*1:8))
	 S-plus gives
	[1] "16"	 "256"	      "4096"	   "65536"	"1048576"   
	[6] "16777216"	 "268435456"  "4294967296"
	 whereas R gives
	[1] "16"	      "256"		"4096"		  "65536"	   
	[5] "1048576"	      "1.6777216e+07"	"2.68435456e+08"  "4.294967296e+09"
	[ This was due to overzealous testing in formatReal.  I have   ]
	[ replaced a hard-coded "8" with the specified "digits" value. ]


----------------------------------------------------------------------
TASK:	Martin's Least Favourite ... Part 2.
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	2) This one has been reported (in slightly different form)
	   >> Date: Mon, 10 Mar 1997 09:46:37 +0100 (MET)
	   >> From: Martyn Plummer <plummer@iarc.fr>
	   >> To: r-testers@stat.math.ethz.ch

	   >> #4) If you put a few lines of comments at the start of a function,
	   >>	  then the comments always appear *after* the first line of code. 

	This is REALLY painful; try, e.g.,

	fcat <- function(..., f.dig= 4, f.wid = f.dig +5, f.flag = ' ', nl = TRUE,
			 file = "", sep = " ",
			 fill = FALSE, labels = NULL, append = FALSE)
	{
	  ## Purpose: Formatted CAT -- for printing 'tables'
	  ## ----------------------------------------------------------------------
	  ## Author: Martin Maechler, Date: 12 May 97
	  l <- unlist(lapply(list(...), formatC,
			     wid= f.wid, digits= f.dig, flag= f.flag))
	  cat(l, if(nl)"\n", file=file, sep=sep, fill=fill,labels=labels, append=append)
	}

	# and look how it prints:
	fcat

	Even worse, some comments are silently lost (yes, I know in some
	sitatuations,  S also loses comments) : 

	ex <- 
	##
	## S version 4 likes comments like these.  
	## ----------- They automagically become  on-line help.
	## R just swallows them up into /dev/null...
	##
	function(a,b)
	{
		a + b
	}
	[ I have fixed this a bit.  It should be possible to ]
	[ add the Sv4 behavior				     ]

----------------------------------------------------------------------
TASK:	rep(.) and aperm(.) lose names(.) and dimnames(.)
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	The following patches fix the problem.
	For aperm, it's quite important to keep dimnames(.);
	for rep(.), it's arguable, however S(-plus) does it...

	However, it would probably be better to this in the '.Internal'
	code for all attributes.

	Patch to be applied in		$RHOME/src/library/base/funs/ 

--- rep~	Sun Nov 24 23:42:29 1996
+++ rep		Tue May 20 18:20:12 1997
@@ -5,6 +5,7 @@
	if (missing(times))
		times <- ceiling(length.out/length(x))
	r<-.Internal(rep(x,times))
+	if(!is.null(nm <- names(x))) names(r) <- .Internal(rep(nm, times))
	if (!missing(length.out))
		return(r[1:length.out])
	return(r)

--- aperm~	Sun Nov 24 23:42:20 1996
+++ aperm	Tue May 20 18:20:10 1997
@@ -7,5 +7,7 @@
		if(!all(sort(perm)==1:length(perm)))
			stop("perm is not a permutation")
	}
-	.Internal(aperm(a,perm,resize))
+	r <- .Internal(aperm(a, perm, resize))
+	if(!is.null(dn <- dimnames(a))) dimnames(r) <- dn[perm]
+	r
 }
	[ Patch applied, but it might be nice to have this adjustment ]
	[ in the internal code. ]

----------------------------------------------------------------------
TASK:	Plot.default
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	A simple example:
		plot(1:10, 1:10, main = "TITLE", lab = c(10,10,7))
		 #> Error: invalid subscript type
	The reason is the call to  axis(1, ...) in  plot.default(.).
	plot.default has the  ...  arguments in order to pass the many
	different possible 'par' options to it's own subfunctions.
	Currently, plot.default has
	 plot.xy(xy, type, col = col, pch = pch, cex = cex, bg = bg,
		lty = lty, ...)
	 axis(1, ...)
	 axis(2, ...)
	 box(...)
	title(main = main, xlab = xlab, ylab = ylab, ...)
	In order for this to work, all the subfunctions MUST be
	tolerant to all possible argument specifications.
	axis(.) is NOT	which leads to the above  Error.
	A different approach would be to "analyze"  list(...),
	extract relevant parameters and pass them to the different
	sub-functions of
		plot.default(.).
	[ The problem here is that "axis" has an argument called ]
	[ "labels" which is matching the "lab=" spec.  Since the ]
	[ ... is just passed on, the usual matching strategy of	 ]
	[ prefering exact matches fails.  There is an easy fix	 ]
	[ however.  Pass the values down using a pars=list(...)	 ]
	[ (I know it's a horrible undocumented kludge, but ...	 ]

----------------------------------------------------------------------
TASK:	Overall Titles
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	In S, I can have an "overall" title in a multi-figure plot :
		par(mfrow=c(2,2), oma = c(0,0,2,0))
		frame() #- !
		mtext("Sine Functions", cex=2, outer =T)
		x_1:100
		for(i in 1:4) plot(x, sin(i*pi*x/100), main=paste(i),
			type = 'l', col = 1+i)
	In R, this doesn't work as it should,  with and without
	the 'frame()' statement.
	((where is the bug?  It's not quite clear to me))
	Is there a way at all to write an "overall" title in this situation ?

	[  The problem was that "mtext" was marking the first plot  ]
	[  dirty even though nothing was being drawn in it.  Now    ]
	[  if outer=TRUE, the plot is not marked dirty.		    ]

----------------------------------------------------------------------
TASK:	No Warning in ":"
STATUS:	Closed
FROM:	<Friedrich.Leisch@ci.tuwien.ac.at>
	In R it is possible to write nonsense 
	R> 0.5:4:3:9:8:5
	[1] 0.5 1.5 2.5 3.5 4.5
	and never be warned about it, Splus does the expected thing:
	Splus> 0.5:4:3:9:8:5
	[1] 0.5 1.5 2.5 3.5 4.5
	Warning messages:
	1: Numerical expression has 4 elements: only the first used in: 0.5:4:3
	2: Numerical expression has 3 elements: only the first used in: 0.5:4:3:9
	3: Numerical expression has 9 elements: only the first used in: 0.5:4:3:9:8
	4: Numerical expression has 8 elements: only the first used in: 0.5:4:3:9:8:5
	[  But what about a more general ":" which does allow vector ]
	[  arguments.						     ]

----------------------------------------------------------------------
TASK:	Complex inaccuracy
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	> Re(1i)
	[1] 2.497599e-307
	rather than 0 whereas Im(as.complex(1)) gives 0 as it should.
	[ This was an uninitialized variable problem in mkComplex, ]
	[ which is called by yyparse to create complex numbers.	   ]

----------------------------------------------------------------------
TASK:	"grep" and backreferences
STATUS:	Closed
FROM:	<p.dalgaard@kubism.ku.dk>
	In answer to <thomas@biostat.washington.edu>:
	I strongly suspect that no number of \s will make it work
	as long as do_grep() in main/character.c contains this
	line:
		eflags = REG_NOSUB;
	[  We now use EFLAGS = 0; instead.  ]

----------------------------------------------------------------------
TASK:	New Apropos Function
STATUS:	Closed
FROM:	<Kurt.Hornik@ci.tuwien.ac.at>
	Martin and I have `written' a function apropos() for finding
	all objects with names matching pattern.  I attach code
	and documentation.  Perhaps one could include it in the
	distribution proper.
	[ Added to base library for Version 0.50. ]

----------------------------------------------------------------------
TASK:	Random query ...
STATUS:	Closed
FROM:	<Kurt.Hornik@ci.tuwien.ac.at>
	Still trying to port Brian's class TB ...
	I need to find replacements for seed_in()/seed_out() and
	unif_rand().  Looks like the first works with
	GetSeeds()/PutSeeds().	Can anyone help me with the second
	one?
	[ Implemented these so they work as described in the S-Plus ]
	[ programmers manual.  Also added S_realloc at Kurt's	    ]
	[ request. ]

----------------------------------------------------------------------
TASK:	var / cov
STATUS:	Closed
FROM:	<thomas@biostat.washington.edu>
	var() handles missing values in a very strange way. It is
	not what the documentation says
		> var(c(NA,1:10))
		[1] 0
		> var(1:10)
		[1] 9.166667
		This is because sum() handles NA incorrectly
		> sum(NA)
		[1] 0
		> sum(NA,na.rm=T)
		[1] 0
		> sum(NA,na.rm=F)
		[1] 0
	Also the documentation gives a pairwise= option to var()
	which isn't in the function.
	[ We need a general resolution to this ... ]

----------------------------------------------------------------------
TASK:	"factor" problem
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	* The documentation for factor() says,
		If exclude is set to a zero length vector, then
		any NA values in x are used for form a new level
		for the factor.	 This means that there will be no
		NA values in the result.
	Perhaps I don't really understand this, but
	R> x <- factor(c(1:3, NA), exclude=numeric(0))
	R> x
	[1]  1	2  3 NA
	R> levels(x)
	[1] "1" "2" "3"
	[  Fixed.  The main problem was that deep inside match	]
	[  we has a test which could be	 NaN == NaN which is	]
	[  always false.					]

----------------------------------------------------------------------
TASK:	inaccurate error messages in coerce.c
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	* coerce.c has two error messages of the form
	error("use \"factor\", \"ordered\", \"cut\" or \"code\" to create factors\n");
	but there is no function `code'.

----------------------------------------------------------------------
TASK:	"cat" problem
STATUS:	Closed
FROM:	<hornik@ci.tuwien.ac.at>
	* cat() is a bit inconsistent:
	R> cat(x, sep = "&")
	1&2&3&4R> cat(x, sep = "&\n")
	1&
	2&
	3&
	4
	R>
	Actually, a final newline is added whenever sep contains
	a newline.
	>From src/main/builtin.c:

	nlsep = 0;
	for (i = 0; i < LENGTH(sepr); i++)
		if (strstr(CHAR(STRING(sepr)[i]), "\n")) nlsep = 1;

	...

	if ((pwidth != INT_MAX) || nlsep)
		Rprintf("\n");

	I am not sure this is the right thing to do.
	(In particular, it makes it rather messy to incrementally
	build data files with `explicit' end-of-line strings (such
	as "\\") by appending via cat().)
	[ This is the way S does it! ]

----------------------------------------------------------------------
TASK:	Return type of ":"
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	which reminds me of bug report	I had sent a while ago,
	I think in pre-alpha times:
	In R,  1:n is	double (aka 'real') and not integer.

----------------------------------------------------------------------
TASK:	Dyn.load utilties
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	In S(plus), I can write functions using code fragments like
		if(!is.loaded(symbol.C("my_C_fun")))
			dyn.load("......../my_C_fun.o")
		r <- .C("my_C_fun",
			x = x,
			n = n, 
			...
			)
	which I would like to have in R, too.
	The S-plus help page on this subject says :
S+>> Code Availability
S+>> 
S+>> DESCRIPTION:
S+>>	    is.loaded returns a logical value  stating	if  the	 given
S+>>	    object   is	 currently  loaded  into  S-PLUS.  dump.loaded
S+>>	    returns a list of loaded symbols.  The "symbol"  functions
S+>>	    return the symbol that would be associated with a name.
S+>> 
S+>> USAGE:
S+>>	    is.loaded(symbol)
S+>>	    dump.loaded()
S+>>	    symbol.C(name)
S+>>	    symbol.For(name)
S+>>	    symbol.S(name)
S+>> 
S+>> REQUIRED ARGUMENTS:
S+>> symbol:	a  symbol,  typically  the  result  of	 symbol.C   or
S+>>	    symbol.For.
S+>> name:     a character string giving the name of a subroutine.
S+>> 
S+>> VALUE:
S+>>	    is.loaded returns a logical	 value:	 it  is	 TRUE  if  the
S+>>	    symbol  is	found  in  the	S-PLUS	symbol table and FALSE
S+>>	    otherwise.	symbol.C returns  the  symbol  that  would  be
S+>>	    produced  by  a C function named name.  symbol.For returns
S+>>	    the symbol that would be produced by a Fortran  subroutine
S+>>	    named  name.   symbol.S  returns  the symbol that would be
S+>>	    produced by an old-S  function  named  name.   dump.loaded
S+>>	    returns  a	list  with two components, symbol and address,
S+>>	    giving the names and addresses of all cached symbols (this
S+>>	    is	a  superset  of	 all  dyn.loaded functions).  Applying
S+>>	    is.loaded to any symbol in this list should return TRUE.
S+>> 
S+>> DETAILS:
S+>>	    These functions  are  mainly  useful  for  writing	S-PLUS
S+>>	    functions  that  will automatically dyn.load code if it is
S+>>	    not loaded already.	 The S-PLUS function can be  the  same
S+>>	    whether  the  code	is  statically	loaded	or dynamically
S+>>	    loaded.
S+>> 
S+>>	    The symbol.S function is only useful for  those  who  have
S+>>	    old-S  (S-PLUS  version 1.x) functions (not macros) and do
S+>>	    not wish to convert them to .Fortran calls.
S+>> 
S+>> SEE ALSO:
S+>>	    dyn.load, dyn.load2, LOAD, .Fortran, .S.
S+>> 
S+>> EXAMPLES:
S+>>	    if (!is.loaded(symbol.C("mbol")))
S+>>			   dyn.load("/usr/mabel/mbol.o")
S+>>	    .C("mbol",as.double(x),as.integer(length(x)))


----------------------------------------------------------------------
TASK:	"rep" problem
STATUS:	Closed
FROM:	<maechler@stat.math.ethz.ch>
	rep(1,0) gives	'Error: subscript out of bounds'
	Here is the new	 ../src/library/base/funs/rep	
		    -------------------------
	(which contains two patches, the first of which I posted on May 20):

rep <- function(x, times, length.out)
{
	if (length(x) == 0)
		return(x)
	if (missing(times))
		times <- ceiling(length.out/length(x))
	r <- .Internal(rep(x,times))
	if(!is.null(nm <- names(x))) names(r) <- .Internal(rep(nm, times))
	if (!missing(length.out))
		return(r[if(length.out>0) 1:length.out else integer(0)])
	return(r)
}

----------------------------------------------------------------------
TASK:	Complex Nits
STATUS:	Closed
FROM:	Paul Gilbert <la-jassine@aix.pacwan.net>
	Mod, Re, Im, and Conj should work for Real numbers using as.complex
	complex should be
	   complex <- function (n = 0, real = numeric(), imaginary = numeric())
	not 
	   complex <- function (n = 0, real = numeric(), imag = numeric()) 

----------------------------------------------------------------------
TASK:	startup processing
STATUS:	Open
FROM:	<mikem@stat.cmu.edu>
	1) The .RData file (and S .Data area) are cputype dependent.
	When R is used from different types of machines (say, HP
	and Sun) that share a common filesystem (say afs or dfs)
	then loading the wrong type of .RData file can lead to
	mysterious behaviour.	In my environment, undergraduate
	students are the most likely to log into different cputypes,
	and they end up being quite confused.	To solve this
	problem in S I set up an S_WORK environment variable that
	set the name of the .Data area, via the front end shell
	script.	 For example, on the HP I use .Data.hp.	  I would
	like to see the same facility in R.  if R_WORK is missing,
	then use the standard name.  If R_WORK exists, then use
	that name as the file to save the R session in.	 (Maybe
	S_WORK exists in Splus only to please me, but it is useful :-).
	[ We now use sun xdr routines when available.  Thus .RData ]
	[ is no longer platform dependent.			   ]

----------------------------------------------------------------------
